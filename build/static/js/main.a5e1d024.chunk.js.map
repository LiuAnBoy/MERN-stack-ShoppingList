{"version":3,"sources":["actions/errorAction.js","actions/types.js","actions/authAction.js","component/auth/RegisterModal.component.jsx","component/auth/Login.component.jsx","component/auth/Logout.component.jsx","component/AppNavBar.component.jsx","actions/itemAction.js","component/ShoppingList.component.jsx","component/itemModel.jsx","reducers/itemReducer.js","reducers/errorRuducer.js","reducers/authRuducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","id","type","payload","clearErrors","tokenConfig","getState","token","auth","config","headers","RegisterModal","props","toggle","setState","modal","state","onChange","e","target","name","value","onSubmit","preventDefault","newUser","email","password","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","Button","style","marginTop","block","React","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","Login","user","login","Logout","logout","AppNavbar","authLinks","NavItem","className","guestLinks","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","propsTypes","PropTypes","object","isRequired","setItemsLoading","ShoppingList","onDeleteClick","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","CSSTransition","key","timeout","classNames","ListGroupItem","size","bind","get","delete","ItemModal","newItem","addItem","marginBottom","initialState","loading","localStorage","getItem","isLoading","combineReducers","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a5e1d024.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from './types'\r\n\r\n// RETURN ERRORS\r\nexport const returnErrors = (msg, status, id = null) => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: { msg, status, id },\r\n  }\r\n}\r\n\r\n// CREAR ERRORS\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS,\r\n  }\r\n}\r\n","// ITEMS\r\nexport const GET_ITEMS = 'GET_ITEMS'\r\nexport const ADD_ITEM = 'ADD_ITEM'\r\nexport const DELETE_ITEM = 'DELETE_ITEM'\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING'\r\n\r\n//USERS\r\nexport const USER_LOADING = 'USER_LOADING'\r\nexport const USER_LOADED = 'USER_LOADED'\r\nexport const AUTH_ERROR = 'AUTH_ERROR'\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS'\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL'\r\nexport const GET_ERRORS = 'GET_ERRORS'\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS'\r\n","import axios from 'axios'\r\nimport { returnErrors } from './errorAction'\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n} from './types'\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  }\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ name, email, password })\r\n\r\n  axios\r\n    .post('/api/users', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\r\n      )\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      })\r\n    })\r\n}\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // User Loading\r\n  dispatch({ type: USER_LOADING })\r\n\r\n  axios\r\n    .get('/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n      })\r\n    })\r\n}\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n  // GET token from loacalstorage\r\n  const token = getState().auth.token\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  }\r\n\r\n  // If token, add to headers\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token\r\n  }\r\n\r\n  return config\r\n}\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n  }\r\n}\r\n\r\n// Login User\r\nexport const login = ({ email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  }\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ email, password })\r\n\r\n  axios\r\n    .post('/api/auth', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\r\n      )\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      })\r\n    })\r\n}\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert,\r\n} from 'reactstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { register } from '../../actions/authAction'\r\nimport { clearErrors } from '../../actions/errorAction'\r\n\r\nclass RegisterModal extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modal: false,\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      msg: null,\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    register: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired,\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props\r\n    if (error !== prevProps.error) {\r\n      // Check for register error\r\n      if (error.id === 'REGISTER_FAIL') {\r\n        this.setState({ msg: error.msg.msg })\r\n      } else {\r\n        this.setState({ msg: null })\r\n      }\r\n    }\r\n\r\n    // If Authenticated, close modal\r\n    if (this.state.modal) {\r\n      if (isAuthenticated) {\r\n        this.toggle()\r\n      }\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.props.clearErrors()\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    })\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    const { name, email, password } = this.state\r\n\r\n    // Create user object\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password,\r\n    }\r\n\r\n    // Attempt to register\r\n    this.props.register(newUser)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href='#'>\r\n          Register\r\n        </NavLink>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Register</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color='danger'>{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='name'>Name</Label>\r\n                <Input\r\n                  type='text'\r\n                  name='name'\r\n                  id='name'\r\n                  placeholder='Name'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for='email'>Email</Label>\r\n                <Input\r\n                  type='email'\r\n                  name='email'\r\n                  id='email'\r\n                  placeholder='Email'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for='password'>Password</Label>\r\n                <Input\r\n                  type='password'\r\n                  name='password'\r\n                  id='password'\r\n                  placeholder='Password'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Register\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error,\r\n})\r\n\r\nexport default connect(mapStateToProps, { register, clearErrors })(\r\n  RegisterModal\r\n)\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert,\r\n} from 'reactstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { login } from '../../actions/authAction'\r\nimport { clearErrors } from '../../actions/errorAction'\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modal: false,\r\n      email: '',\r\n      password: '',\r\n      msg: null,\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired,\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props\r\n    if (error !== prevProps.error) {\r\n      // Check for register error\r\n      if (error.id === 'LOGIN_FAIL') {\r\n        this.setState({ msg: error.msg.msg })\r\n      } else {\r\n        this.setState({ msg: null })\r\n      }\r\n    }\r\n\r\n    // If Authenticated, close modal\r\n    if (this.state.modal) {\r\n      if (isAuthenticated) {\r\n        this.toggle()\r\n      }\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.props.clearErrors()\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    })\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    const { email, password} = this.state\r\n\r\n    const user = {\r\n      email,\r\n      password,\r\n    }\r\n\r\n    // Attempt to login\r\n    this.props.login(user)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href='#'>\r\n          Login\r\n        </NavLink>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color='danger'>{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='email'>Email</Label>\r\n                <Input\r\n                  type='email'\r\n                  name='email'\r\n                  id='email'\r\n                  placeholder='Email'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for='password'>Password</Label>\r\n                <Input\r\n                  type='password'\r\n                  name='password'\r\n                  id='password'\r\n                  placeholder='Password'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Login\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error,\r\n})\r\n\r\nexport default connect(mapStateToProps, { login, clearErrors })(\r\n  Login\r\n)\r\n","import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'reactstrap'\r\nimport { logout } from '../../actions/authAction'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Logout extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {}\r\n  }\r\n\r\n  static propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <NavLink onClick={this.props.logout} href='#'>\r\n          Logout\r\n        </NavLink>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null, { logout })(Logout)\r\n","import React, { Fragment } from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  Container,\r\n} from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport RegisterModal from './auth/RegisterModal.component'\r\nimport Login from './auth/Login.component'\r\nimport Logout from './auth/Logout.component'\r\n\r\nclass AppNavbar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    }\r\n  }\r\n\r\n  static propsTypes = {\r\n    auth: PropTypes.object.isRequired,\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated, user } = this.props.auth\r\n\r\n    const authLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <span className='navbar-text mr-3'>\r\n            <strong>{user ? `Welcome ${user.name}` : ''}</strong>\r\n          </span>\r\n        </NavItem>\r\n        <NavItem>\r\n          <Logout />\r\n        </NavItem>\r\n      </Fragment>\r\n    )\r\n\r\n    const guestLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <RegisterModal />\r\n        </NavItem>\r\n        <NavItem>\r\n          <Login />\r\n        </NavItem>\r\n      </Fragment>\r\n    )\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color='dark' dark expand='sm' className='mb-5'>\r\n          <Container>\r\n            <NavbarBrand href='/'>ShoppingList</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className='ml-auto' navbar>\r\n                {isAuthenticated ? authLinks : guestLinks}\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(AppNavbar)\r\n","import axios from 'axios'\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types'\r\nimport { tokenConfig } from './authAction'\r\nimport { returnErrors } from './errorAction'\r\n\r\nexport const getItems = () => dispatch => {\r\n  dispatch(setItemsLoading())\r\n  axios\r\n    .get('/api/items')\r\n    .then(res =>\r\n      dispatch({\r\n        type: GET_ITEMS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    })\r\n}\r\n\r\nexport const addItem = item => (dispatch, getState) => {\r\n  axios\r\n    .post('/api/items', item, tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: ADD_ITEM,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    })\r\n}\r\n\r\nexport const deleteItem = id => (dispatch, getState) => {\r\n  axios\r\n    .delete(`/api/items/${id}`, tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: DELETE_ITEM,\r\n        payload: id,\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    })\r\n}\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING,\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getItems, deleteItem } from '../actions/itemAction'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ShoppingList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  static propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n    isAuthenticated: PropTypes.bool,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getItems()\r\n  }\r\n\r\n  onDeleteClick = id => {\r\n    this.props.deleteItem(id)\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props.item\r\n    return (\r\n      <Container>\r\n        <ListGroup>\r\n          <TransitionGroup className='shopping-list'>\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={500} classNames='fade'>\r\n                <ListGroupItem>\r\n                  {this.props.isAuthenticated ? (\r\n                    <Button\r\n                      className='remove-btn'\r\n                      color='danger'\r\n                      size='sm'\r\n                      onClick={this.onDeleteClick.bind(this, _id)}>\r\n                      &times;\r\n                    </Button>\r\n                  ) : null}\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  item: state.item,\r\n})\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList)\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { addItem } from '../actions/itemAction'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ItemModal extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modal: false,\r\n      name: '',\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    })\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    const newItem = {\r\n      name: this.state.name,\r\n    }\r\n\r\n    // Add item via addItem action\r\n    this.props.addItem(newItem)\r\n\r\n    // Close modal\r\n    this.toggle()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.isAuthenticated ? (\r\n          <Button\r\n            color='dark'\r\n            style={{ marginBottom: '2rem' }}\r\n            onClick={this.toggle}>\r\n            Add Item\r\n          </Button>\r\n        ) : (\r\n          <h4 className='mb-3 ml-4'>Please log in to manage items</h4>\r\n        )}\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add To Shopping List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='item'>Item</Label>\r\n                <Input\r\n                  type='text'\r\n                  name='name'\r\n                  id='item'\r\n                  placeholder='Add Shopping item'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Add Item\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  item: state.item,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n})\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal)\r\n","import {\r\n  GET_ITEMS,\r\n  ADD_ITEM,\r\n  DELETE_ITEM,\r\n  ITEMS_LOADING,\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false,\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false,\r\n      }\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item._id !== action.payload),\r\n      }\r\n    case ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n      }\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types'\r\n\r\nconst initialState = {\r\n  msg: {},\r\n  status: null,\r\n  id: null,\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return {\r\n        msg: action.payload.msg,\r\n        status: action.payload.status,\r\n        id: action.payload.id,\r\n      }\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        msg: {},\r\n        status: null,\r\n        id: null,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem('token'),\r\n  isAuthenticated: null,\r\n  isLoading: false,\r\n  user: null,\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case USER_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      }\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        user: action.payload,\r\n      }\r\n    case LOGIN_SUCCESS:\r\n    case REGISTER_SUCCESS:\r\n      localStorage.setItem('token', action.payload.token)\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n      }\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAIL:\r\n    case LOGOUT_SUCCESS:\r\n    case REGISTER_FAIL:\r\n      localStorage.removeItem('token')\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport itemReducer from './itemReducer'\r\nimport errorReducer from './errorRuducer'\r\nimport authReducer from './authRuducer'\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n  error: errorReducer,\r\n  auth: authReducer,\r\n})\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store\r\n","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport AppNavbar from './component/AppNavBar.component'\nimport ShoppingList from './component/ShoppingList.component'\nimport ItemModal from './component/itemModel'\n\nimport { Container } from 'reactstrap'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { loadUser } from './actions/authAction'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount() {\n    store.dispatch(loadUser())\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className='App'>\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}