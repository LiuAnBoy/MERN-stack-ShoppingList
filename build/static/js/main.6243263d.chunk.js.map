{"version":3,"sources":["component/AppNavBar.component.jsx","actions/itemAction.js","actions/types.js","component/ShoppingList.component.jsx","component/itemModel.jsx","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","toggle","setState","isOpen","state","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","React","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","console","log","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6243263d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container,\r\n} from 'reactstrap'\r\n\r\nclass AppNavbar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Navbar color='dark' dark expand='sm' className='mb-5'>\r\n          <Container>\r\n            <NavbarBrand href='/'>ShoppingList</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className='ml-auto' navbar>\r\n                <NavItem>\r\n                  <NavLink href='https://github.com/liuanboy'>Github</NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppNavbar\r\n","import axios from 'axios'\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types'\r\n\r\nexport const getItems = () => (dispatch) => {\r\n  dispatch(setItemsLoading())\r\n  axios.get('/api/items').then((res) =>\r\n    dispatch(\r\n      {\r\n        type: GET_ITEMS,\r\n        payload: res.data,\r\n      },\r\n      console.log('GET ITEMS:', res.data)\r\n    )\r\n  )\r\n}\r\n\r\nexport const addItem = (item) => (dispatch) => {\r\n  axios\r\n    .post('/api/items', item)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: ADD_ITEM,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .then(console.log('ADD ITEM:', item))\r\n}\r\n\r\nexport const deleteItem = (id) => (dispatch) => {\r\n  axios.delete(`/api/items/${id}`).then((res) =>\r\n    dispatch({\r\n      type: DELETE_ITEM,\r\n      payload: id,\r\n    })\r\n  )\r\n}\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING,\r\n  }\r\n}\r\n","export const GET_ITEMS = 'GET_ITEMS'\r\n\r\nexport const ADD_ITEM = 'ADD_ITEM'\r\n\r\nexport const DELETE_ITEM = 'DELETE_ITEM'\r\n\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING'","import React from 'react'\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getItems, deleteItem } from '../actions/itemAction'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ShoppingList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getItems()\r\n  }\r\n\r\n  onDeleteClick = (id) => {\r\n    this.props.deleteItem(id)\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props.item\r\n    return (\r\n      <Container>\r\n        <ListGroup>\r\n          <TransitionGroup className='shopping-list'>\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={500} classNames='fade'>\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className='remove-btn'\r\n                    color='danger'\r\n                    size='sm'\r\n                    onClick={this.onDeleteClick.bind(this, _id)}>\r\n                    &times;\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n  getItems: PropTypes.func.isRequired,\r\n  item: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item,\r\n})\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList)\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { addItem } from '../actions/itemAction'\r\n\r\nclass ItemModal extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modal: false,\r\n      name: '',\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    })\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const newItem = {\r\n      name: this.state.name,\r\n    }\r\n\r\n    // Add item via addItem action\r\n    this.props.addItem(newItem)\r\n\r\n    // Close modal\r\n    this.toggle()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          color='dark'\r\n          style={{ marginBottom: '2rem' }}\r\n          onClick={this.toggle}>\r\n          Add Item\r\n        </Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add To Shopping List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='item'>Item</Label>\r\n                <Input\r\n                  type='text'\r\n                  name='name'\r\n                  id='item'\r\n                  placeholder='Add Shopping item'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Add Item\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item,\r\n})\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal)\r\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types'\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false\r\n      }\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item._id !== action.payload),\r\n      }\r\n    case ADD_ITEM:\r\n      return{\r\n        ...state,\r\n        items: [action.payload, ...state.items]\r\n      }\r\n    case ITEMS_LOADING:\r\n      return{\r\n        ...state,\r\n        loading: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport itemReducer from './itemReducer'\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n})\r\n","import { createStore, applyMiddleware, compose} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n  applyMiddleware(...middleware),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n\r\nexport default store","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport AppNavbar from './component/AppNavBar.component'\nimport ShoppingList from './component/ShoppingList.component'\nimport ItemModal from './component/itemModel'\n\nimport { Container } from 'reactstrap'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}